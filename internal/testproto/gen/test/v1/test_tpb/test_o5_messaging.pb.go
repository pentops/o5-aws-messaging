// Code generated by Bprotoc-gen-go-o5-messaging . DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: test/v1/topic/test.proto

package test_tpb

import (
	context "context"
	messaging_pb "github.com/pentops/o5-go/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging.go/o5msg"
)

// Service: TestTopic
type TestTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewTestTopicSender[C any](sender o5msg.Sender[C]) *TestTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Test",
				Message: (*TestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestTopicSender[C]{Sender: sender}
}

type TestTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewTestTopicCollector[C any](collector o5msg.Collector[C]) *TestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Test",
				Message: (*TestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestTopicCollector[C]{Collector: collector}
}

// Method: Test

func (msg *TestMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService: "test.v1.topic.TestTopic",
		GrpcMethod:  "Test",
		Headers:     map[string]string{},
	}
	return header
}

func (send TestTopicSender[C]) Test(ctx context.Context, sendContext C, msg *TestMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect TestTopicCollector[C]) Test(sendContext C, msg *TestMessage) {
	collect.Collector.Collect(sendContext, msg)
}

// Service: GreetingRequestTopic
type GreetingRequestTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewGreetingRequestTopicSender[C any](sender o5msg.Sender[C]) *GreetingRequestTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.GreetingRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Greeting",
				Message: (*GreetingMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &GreetingRequestTopicSender[C]{Sender: sender}
}

type GreetingRequestTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewGreetingRequestTopicCollector[C any](collector o5msg.Collector[C]) *GreetingRequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.GreetingRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Greeting",
				Message: (*GreetingMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &GreetingRequestTopicCollector[C]{Collector: collector}
}

// Method: Greeting

func (msg *GreetingMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService: "test.v1.topic.GreetingRequestTopic",
		GrpcMethod:  "Greeting",
		Headers:     map[string]string{},
	}
	return header
}

func (send GreetingRequestTopicSender[C]) Greeting(ctx context.Context, sendContext C, msg *GreetingMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect GreetingRequestTopicCollector[C]) Greeting(sendContext C, msg *GreetingMessage) {
	collect.Collector.Collect(sendContext, msg)
}

// Service: GreetingResponseTopic
type GreetingResponseTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewGreetingResponseTopicSender[C any](sender o5msg.Sender[C]) *GreetingResponseTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.GreetingResponseTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Response",
				Message: (*ResponseMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &GreetingResponseTopicSender[C]{Sender: sender}
}

type GreetingResponseTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewGreetingResponseTopicCollector[C any](collector o5msg.Collector[C]) *GreetingResponseTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.GreetingResponseTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Response",
				Message: (*ResponseMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &GreetingResponseTopicCollector[C]{Collector: collector}
}

// Method: Response

func (msg *ResponseMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService: "test.v1.topic.GreetingResponseTopic",
		GrpcMethod:  "Response",
		Headers:     map[string]string{},
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

func (send GreetingResponseTopicSender[C]) Response(ctx context.Context, sendContext C, msg *ResponseMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect GreetingResponseTopicCollector[C]) Response(sendContext C, msg *ResponseMessage) {
	collect.Collector.Collect(sendContext, msg)
}
